name: AWS CodeDeploy Deploy

on:
  push:
    branches:
      - main
env:
  PROJECT_NAME: s-ecs-blue-green-ga
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-cdk-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cdk-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm ci
        working-directory: ./cdk

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: output image tag
        id: output-image-tag
        run: |
          # output image tag
          echo "image-tag=${GITHUB_SHA:0:7}" >> "$GITHUB_OUTPUT"

      - name: deploy ecr stack
        run: |
          # deploy ecr stack
          npm run cdk -- deploy ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecr \
            -c environment=dev \
            -c projectName=${{ env.PROJECT_NAME }} \
            -c imageTag=${{ steps.output-image-tag.outputs.image-tag }} \
            --require-approval never
        working-directory: ./cdk

      - name: login to ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: output ecr repository name
        id: output-repository-name
        run: |
          # output ecr repository name
          repositoryName=$(jq -r '.["${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecr"].RepositoryName' outputs.json)
          echo "repository-name=$repositoryName" >> "$GITHUB_OUTPUT"
        working-directory: ./cdk

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image to Amazon ECR
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{  steps.output-repository-name.outputs.repository-name }}
          IMAGE_TAG: ${{ steps.output-image-tag.outputs.image-tag }}
        with:
          context: ./app
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: deploy app stack
        run: |
          # deploy app stack
          npm run cdk -- deploy ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-app \
            -c environment=dev \
            -c projectName=${{ env.PROJECT_NAME }} \
            -c imageTag=${{ steps.output-image-tag.outputs.image-tag }} \
            --require-approval never
        working-directory: ./cdk

#      - name: output task definition family
#        id: output-task-definition-family
#        run: |
#          # output task definition family
#          ecsTaskDefinitionFamily=$(jq -r '.["${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-ecr"].EcsTaskDefinitionFamily' outputs.json)
#          echo "task-definition-family=$ecsTaskDefinitionFamily" >> "$GITHUB_OUTPUT"
#        working-directory: ./cdk
#
#      - name: create task-definition.json
#        run: |
#          # create task-definition.json
#          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ steps.output-task-definition-family.outputs.task-definition-family }} --query taskDefinition)
#          echo $TASK_DEFINITION > task-definition.json
#          ls -al
#          cat task-definition.json
#
#      - name: Deploy to Amazon ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: task-definition.json
#          service: my-service
#          cluster: my-cluster
#          wait-for-service-stability: true
#          codedeploy-appspec: appspec.json
#          codedeploy-application: my-codedeploy-application
#          codedeploy-deployment-group: my-codedeploy-deployment-group
#      - name: Deploy to Amazon ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: task-definition.json
#          service: my-service
#          cluster: my-cluster
#
#          wait-for-service-stability: true
#      - name: CodeDeployでデプロイ開始
#        run: |
#          aws deploy create-deployment \
#            --application-name s-ecs-blue-green-ga-dev-application \
#            --deployment-group-name s-ecs-blue-green-ga-dev-deployment-group \
#            --deployment-config-name s-ecs-blue-green-ga-dev-deployment-config \
#            --github-location repository=${{github.repository}},commitId=${{github.sha}}